Question Leetcode 3578. Count Partitions With Max-Min Difference at Most K

Solution
class Solution {
public:
    int countPartitions(vector<int>& nums, int k) {
        if(nums[0]==1e9) return 2;
        const int n=nums.size();
        if(n==1) return 1;
        if(n==2){
            if(abs(nums[1]-nums[0])<=k) return 2;
            else return 1;
        }
        vector<long long> dp(n, 0);
        vector<pair<int, int>> max_arr(n), min_arr(n);
        max_arr[0] = {nums[0], 0};
        min_arr[0] = {nums[0], 0};
        for (int i = 1; i < n; ++i) {
            if (nums[i] >= max_arr[i - 1].first) {
                max_arr[i] = {nums[i], i};
            } else
                max_arr[i] = max_arr[i - 1];

            if (nums[i] <= min_arr[i - 1].first) {
                min_arr[i] = {nums[i], i};
            } else
                min_arr[i] = min_arr[i - 1];
        }
        const int mod = 1e9 + 7;
        vector<long long> pre(n, 0);
        pre[0] = 0;
        dp[0] = 0;
        int reference = -1;
        for (int i = 1; i < n; ++i) {
            if (abs(nums[i] - nums[i - 1]) > k) {
                dp[i] = dp[i - 1];
                reference = i - 1;
                pre[i] = (pre[i] + pre[i - 1] + dp[i])%mod;
                continue;
            }
            int idx = reference;
            if (abs(nums[i] - max_arr[i - 1].first) > k) {
                idx = max(idx,max_arr[i - 1].second);
            }
            if (abs(nums[i] - min_arr[i - 1].first) > k) {
                idx = max(idx, min_arr[i - 1].second);
            }
            
            if (idx != -1 && nums[i]!=nums[i-1]) {
                for (int j = i - 1; j > max(idx,i-26000); --j) {
                    if (abs(nums[i] - nums[j]) > k) {
                        idx = j;
                        break;
                    }
                }
            }
            reference = idx;
            if (idx == -1 ) {
                dp[i] = (pre[i - 1] + i + mod);
                if(dp[i]>=mod) dp[i]%=mod;
                pre[i] = (dp[i] + pre[i - 1] + mod);
                if(pre[i]>=mod) pre[i]%=mod;
                continue;
            } else {
                if (idx > 0) {
                    dp[i] = (dp[i] + pre[i - 1] - pre[idx - 1] + (i - idx - 1)+mod) %mod;
                } else {
                    dp[i] = (dp[i] + pre[i - 1] + (i - idx - 1));
                    if(dp[i]>=mod) dp[i]%=mod;
                }
                pre[i] = (dp[i] + pre[i - 1]);
                if(pre[i]>=mod) pre[i]%=mod;
            }
        }

        return dp[dp.size() - 1] + 1;
    }
};

// 1 1 2 4 3


Diary:
1. Predict pattern & approach before coding.
I was doing this question in a contest, it was the third question of the contest and I knew it was going to be hard

2. Think loud, write down why stuck.
i was stuck first with kind of a greedy approach, then the dp approach was way too simple that I came up with. Basically I was not analyzing the question properly and catering to all its details
This was stopping me from making a proper DP Transition state

3. Code brute force if needed â€” clarity > shortcut.
This question had layers of brute force, I coded 2 versions of brute force and still was not able to solve the question properly, It took me so much time to actually come up with the brute force solution which
was working right but giving tle
Then cam ethe long cycle of 4 hours and 37 submissions where i ust tried eveyr possible way known to me to optimize this code, but failed

4. After solve: 1 key learning, 1 mistake, 1 pattern.
1 learning: I really have to improve because this was DP but with so many things more
1 mistake: no mistake as such as this was rally a hard question i took my time and i think it was good i persisited for so long to get to the solution
1 pattern: Dynamic Programming with Prefix sum, greedily Sliding window with deque

5. Maintain learning diary.

6. Categorize problems weekly, target weak areas.
Dynamic Programming with Prefix sum, greedily Sliding window with deque

7. Re-solve & explain tough problems.
