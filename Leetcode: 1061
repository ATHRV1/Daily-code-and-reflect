Question: Leetcode: 1061. Lexicographically Smallest Equivalent String

Solution:
class Solution {
public:
    string smallestEquivalentString(string s1, string s2, string bs) {
        unordered_map<int, unordered_set<char>> mpp;
        for (int i = 0; i < 26; ++i) {
            mpp[i].insert('a' + i);
        }
        for (int i = 0; i < s1.size(); ++i) {
            mpp[s1[i] - 'a'].insert(s2[i]);
            mpp[s2[i] - 'a'].insert(s1[i]);
        }
        vector<char> arr(26, '!');
        for (int i = 0; i < 26; ++i) {
            arr[i] = 'a' + i;
        }
        for (int j = 0; j < 26; ++j) {
            for (int i = 1; i < 26; ++i) {
                char t = 'a' + i;
                for (char c : mpp[i]) {
                    t = min(t, arr[c - 'a']);
                }
                arr[i] = t;
            }
        }
        string ans = "";
        for (int i = 0; i < bs.size(); ++i) {
            ans += arr[bs[i] - 'a'];
        }
        return ans;
    }
};


Diary:
1. Predict pattern & approach before coding.
initially I thought it was a bit difficult and graph based but then I came up with a map approach 

2. Think loud, write down why stuck.
I initially tried a direct mapping approach but realized it failed because equivalence relations are transitive.
If a ≡ e, e ≡ o, and o ≡ d, then a ≡ d, but simple pairwise mapping doesn't capture these indirect connections.

3. Code brute force if needed — clarity > shortcut.
coding almost brute force was the answer here, since only 26 characters so 26x26 combinations is all i need as the longest possible chain of equivalences is 26
After 26 iterations, you're guaranteed to have propagated the smallest equivalent character through all possible transitive connections.

4. After solve: 1 key learning, 1 mistake, 1 pattern.
1 learning: do not be scared to try brute force
1 mistake: Was not carefully examining the transverse equation relation
1 pattern: Map

5. Maintain learning diary.

6. Categorize problems weekly, target weak areas.
greedy and brute force

7. Re-solve & explain tough problems.
