Question:
CodeForces: Educational Codeforces Round 179 (Rated for Div. 2)
C. Equal Values
time limit per test: 2 seconds
memory limit per test: 512 megabytes

Solution:
#include <bits/stdc++.h>
using namespace std;

typedef unsigned long long ll;

#define fastio             \
  ios::sync_with_stdio(0); \
  cin.tie(0);
#define forl(i, a, b) for (ll i = a; i < b; ++i)
#define rfor(i, a, b) for (int i = a - 1; i >= b; --i)
#define fora(x, v) for (auto x : v)
#define vi vector<int>
#define vll vector<ll>
#define vs vector<string>
#define vpii vector<pair<int, int>>
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define p(a) cout << a << "\n";
#define p2(a, b) cout << a << " " << b << "\n";
#define YES cout << "YES\n";
#define NO cout << "NO\n";
#define pb push_back
#define pf push_front
#define mp make_pair

const ll mod = 1e9 + 7;

// if wrong answer, never look at it, try to solve and create new testcase on your own

void solve()
{
  ll n;
  cin>>n;
  vll arr(n);
  forl(i,0,n) cin>>arr[i];
  bool c=false;
  forl(i,1,n){
    if(arr[i]!=arr[i-1]){
      c=true;
      break;
    }
  }
  if(!c){
    p(0);
    return;
  }
  else{
    ll mini=LLONG_MAX;
    ll cnt=1;
    forl(i,1,n){
      if(arr[i]==arr[i-1]){
        cnt++;
      }
      else{
        ll temp=(ll(n-cnt))*(ll(arr[i-1]));
        mini=min(mini,temp);
        cnt=1;
      }
    }
    mini=min(mini,(ll(n-cnt))*(ll(arr[n-1])));
    p(mini);
  }
}

int main()
{
  fastio;
  ll testcase = 1;
  cin >> testcase;

  while (testcase--)
  {
    solve();
  }
  return 0;
}



Diary:
1. Predict pattern & approach before coding.
I was very excited for this Contest, The Educational Codeforces Contest.

2. Think loud, write down why stuck.
This question was simpler comparitively but there was a very small thing many people would miss

3. Code brute force if needed â€” clarity > shortcut.
Brute force again is ike very worse approach, this is kinda Codeforces vibe brute force is so scary eveytime until you find the pattern

4. After solve: 1 key learning, 1 mistake, 1 pattern.
1 learning: Codeforces usually work on tricks rather then full scale code for starting questions in a contest, focus on that
1 mistake: knew not to make things very complex, make things simpler
1 pattern: Observation, greedy

5. Maintain learning diary.

6. Categorize problems weekly, target weak areas.
Observation, greedy

7. Re-solve & explain tough problems.
