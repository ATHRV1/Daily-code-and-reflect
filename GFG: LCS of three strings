Question GFG: LCS of three strings

Solution:
class Solution {
  public:
    int lcsOf3(string& s1, string& s2, string& s3) {
        // Code here
        vector<vector<vector<int>>> arr(s1.size()+1,vector<vector<int>>(s2.size()+1,(vector<int>(s3.size()+1,0))));
        for(int i=1;i<=s1.size();++i){
            for(int j=1;j<=s2.size();++j){
                for(int k=1;k<=s3.size();++k){
                    if(s1[i-1]==s2[j-1] && s2[j-1]==s3[k-1]){
                        arr[i][j][k]=1+arr[i-1][j-1][k-1];
                    }
                    else{
                        arr[i][j][k]=max({arr[i-1][j][k],arr[i][j-1][k],arr[i][j][k-1]});      
                    }
                }
            }
        }
        
        return arr[s1.size()][s2.size()][s3.size()];
    }
};


Diary:
1. Predict pattern & approach before coding.
First I thought 3D DP is like beyond me, how can it be even possible but then i was amazed 

2. Think loud, write down why stuck.
Took the wrong approach though i should take common of first 2 strings and then compare it with the third one but it does not work as third string would not have the sam echaracters common as lcs of first 2 strings

3. Code brute force if needed â€” clarity > shortcut.
Brute force would not work already knew lcs but 3d was a bit good and new

4. After solve: 1 key learning, 1 mistake, 1 pattern.
1 learning: Do not be scared to try something never done before 
1 mistake: Nothing conceptual just wrong approach in starting
1 pattern: LCS with a twist of 3 Dimensional Tabulation

5. Maintain learning diary.

6. Categorize problems weekly, target weak areas.
Longest Common Subsequence Dp

7. Re-solve & explain tough problems.

