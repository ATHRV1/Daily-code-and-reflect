Question: Leetcode: 135: Candy

Solution:
class Solution {
public:
    int candy(vector<int>& r) {
        if(r.size()==1) return 1;
        vector<char> arr(r.size());
        if(r[0]>r[1]){
            arr[0]='!';
        }
        else arr[0]='-';
        if(r[r.size()-1]>r[r.size()-2]){
            arr[r.size()-1]='+';
        }
        else arr[r.size()-1]='-';
        for(int i=1;i<r.size()-1;++i){
            if(r[i]>r[i-1]){
                arr[i]='+';
            }
            else if(r[i]>r[i+1]){
                arr[i]='!';
            }
            else{
                arr[i]='-';
            }
        }
        for(int i=0;i<r.size();++i){
            cout<<arr[i]<<" ";
        }
        vector<int> ans(r.size());
        ans[0]=1;
        for(int i=1;i<r.size();++i){
            if(arr[i]!='+'){
                ans[i]=1;
            }
            else{
                if(arr[i-1]=='+'){
                    ans[i]=ans[i-1]+1;
                }
                else ans[i]=2;
            }
        }
        for(int i=r.size()-2;i>=0;--i){
            if(arr[i]=='!'){
                if(arr[i+1]=='!'){
                    ans[i]=ans[i+1]+1;
                }
                else ans[i]=2;
            }
        }
        for(int i=r.size()-2;i>=0;--i){
            if(arr[i]=='+' && arr[i+1]=='!' && ans[i]<=ans[i+1] && r[i]>r[i+1]){
                ans[i]=ans[i+1]+1;
            }
        }
        int sum=0;
        for(int i: ans) sum+=i;

        return sum;
        
    }
};
// 1 1 2 3 4 5 4 3 2 1 2 3 4
// 4 3 2 1 2 3 4 5 6 7 8 9 4 3 2 1 1
// 4 3 2 1 2 3 4 5 4 3 2 1 1
// 1 8 7 6 5 4 3 2 1 1 1 2 1

Diary:
1. Predict pattern & approach before coding.
Saw this question yesterday and left because it was tagged Hard today I was not in a good mood and just wanted to solve this question no matter what

2. Think loud, write down why stuck.
Definitely got stuck in the part where ascending order of ratings is followed by descending order of ratings

3. Code brute force if needed â€” clarity > shortcut.
Brute force was not really a way to go here knew the tricky part was to see the neighbours properly nothing to brute force here

4. After solve: 1 key learning, 1 mistake, 1 pattern.
1 learning: Keep your eyes peeled on the minute details of the question and the testcases, 
The more you come up with your own testcases the better you get at it and the better the chance to solve the question on the first go,
I would not even say edge cases they are part of the testcases only so we must try to think it all

1 mistake: mistake was a bit bound to happen here and it happened with 1 last edge case after solving all of them
1 pattern; Pattern was mre or less not here it was kind of a Constructing algo type thing

5. Maintain learning diary.

6. Categorize problems weekly, target weak areas.
Constructive algo, Greedy
7. Re-solve & explain tough problems.
