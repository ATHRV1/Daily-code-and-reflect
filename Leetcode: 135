Question: Leetcode: 135: Candy

Solution:
class Solution {
public:
    int candy(vector<int>& r) {
        if(r.size()==1) return 1;
        vector<char> arr(r.size());
        if(r[0]>r[1]){
            arr[0]='!';
        }
        else arr[0]='-';
        if(r[r.size()-1]>r[r.size()-2]){
            arr[r.size()-1]='+';
        }
        else arr[r.size()-1]='-';
        for(int i=1;i<r.size()-1;++i){
            if(r[i]>r[i-1]){
                arr[i]='+';
            }
            else if(r[i]>r[i+1]){
                arr[i]='!';
            }
            else{
                arr[i]='-';
            }
        }
        for(int i=0;i<r.size();++i){
            cout<<arr[i]<<" ";
        }
        vector<int> ans(r.size());
        ans[0]=1;
        for(int i=1;i<r.size();++i){
            if(arr[i]!='+'){
                ans[i]=1;
            }
            else{
                if(arr[i-1]=='+'){
                    ans[i]=ans[i-1]+1;
                }
                else ans[i]=2;
            }
        }
        for(int i=r.size()-2;i>=0;--i){
            if(arr[i]=='!'){
                if(arr[i+1]=='!'){
                    ans[i]=ans[i+1]+1;
                }
                else ans[i]=2;
            }
        }
        for(int i=r.size()-2;i>=0;--i){
            if(arr[i]=='+' && arr[i+1]=='!' && ans[i]<=ans[i+1] && r[i]>r[i+1]){
                ans[i]=ans[i+1]+1;
            }
        }
        int sum=0;
        for(int i: ans) sum+=i;

        return sum;
        
    }
};
// 1 1 2 3 4 5 4 3 2 1 2 3 4
// 4 3 2 1 2 3 4 5 6 7 8 9 4 3 2 1 1
// 4 3 2 1 2 3 4 5 4 3 2 1 1
// 1 8 7 6 5 4 3 2 1 1 1 2 1

Diary:
1. Predict pattern & approach before coding.
Thought this was going to be a very hard question with some very difficult trick

2. Think loud, write down why stuck.
I was stuck by a Mental barrier then i saw the constraints and then the answer came poppin up

3. Code brute force if needed â€” clarity > shortcut.
Brute force here would be to recurse the solution digit by digit repeatedly and it would probably work

4. After solve: 1 key learning, 1 mistake, 1 pattern.
1 learning: My brute force kinda DP was optimal for this question but there is a better approach but i think mine is more natural
1 mistake: so silly mistake of char to digit conversion maybe i am a bit tired right now so
1 pattern; It had a digit dp pattern which is very good and to be used but i think that my way was more natural and ismple which is often better

5. Maintain learning diary.

6. Categorize problems weekly, target weak areas.
Digit DP very hard I solved in a Different way
7. Re-solve & explain tough problems.
